package org.energy_home.jemma.ah.zigbee.zcl.cluster.closures;

import java.util.Collection;
import java.util.Map;
import org.energy_home.jemma.ah.cluster.zigbee.closures.ClearAllPINCodesResponse;
import org.energy_home.jemma.ah.cluster.zigbee.closures.ClearAllRFIDCodesResponse;
import org.energy_home.jemma.ah.cluster.zigbee.closures.ClearHolidayScheduleResponse;
import org.energy_home.jemma.ah.cluster.zigbee.closures.ClearPINCodeResponse;
import org.energy_home.jemma.ah.cluster.zigbee.closures.ClearRFIDCodeResponse;
import org.energy_home.jemma.ah.cluster.zigbee.closures.ClearWeekdayScheduleResponse;
import org.energy_home.jemma.ah.cluster.zigbee.closures.ClearYearDayScheduleResponse;
import org.energy_home.jemma.ah.cluster.zigbee.closures.DoorLockClient;
import org.energy_home.jemma.ah.cluster.zigbee.closures.DoorLockServer;
import org.energy_home.jemma.ah.cluster.zigbee.closures.GetHolidayScheduleResponse;
import org.energy_home.jemma.ah.cluster.zigbee.closures.GetLogRecordResponse;
import org.energy_home.jemma.ah.cluster.zigbee.closures.GetPINCodeResponse;
import org.energy_home.jemma.ah.cluster.zigbee.closures.GetRFIDCodeResponse;
import org.energy_home.jemma.ah.cluster.zigbee.closures.GetUserStatusResponse;
import org.energy_home.jemma.ah.cluster.zigbee.closures.GetUsertypeResponse;
import org.energy_home.jemma.ah.cluster.zigbee.closures.GetWeekdayScheduleResponse;
import org.energy_home.jemma.ah.cluster.zigbee.closures.GetYearDayScheduleResponse;
import org.energy_home.jemma.ah.cluster.zigbee.closures.LockDoorResponse;
import org.energy_home.jemma.ah.cluster.zigbee.closures.SetHolidayScheduleResponse;
import org.energy_home.jemma.ah.cluster.zigbee.closures.SetPINCodeResponse;
import org.energy_home.jemma.ah.cluster.zigbee.closures.SetRFIDCodeResponse;
import org.energy_home.jemma.ah.cluster.zigbee.closures.SetUserStatusResponse;
import org.energy_home.jemma.ah.cluster.zigbee.closures.SetUsertypeResponse;
import org.energy_home.jemma.ah.cluster.zigbee.closures.SetWeekdayScheduleResponse;
import org.energy_home.jemma.ah.cluster.zigbee.closures.SetYearDayScheduleResponse;
import org.energy_home.jemma.ah.cluster.zigbee.closures.ToggleResponse;
import org.energy_home.jemma.ah.cluster.zigbee.closures.UnlockDoorResponse;
import org.energy_home.jemma.ah.cluster.zigbee.closures.UnlockWithTimeoutResponse;
import org.energy_home.jemma.ah.hac.ApplianceException;
import org.energy_home.jemma.ah.hac.IEndPointRequestContext;
import org.energy_home.jemma.ah.hac.ServiceClusterException;
import org.energy_home.jemma.ah.internal.zigbee.ZclAttributeDescriptor;
import org.energy_home.jemma.ah.zigbee.IZclFrame;
import org.energy_home.jemma.ah.zigbee.ZCL;
import org.energy_home.jemma.ah.zigbee.ZclFrame;
import org.energy_home.jemma.ah.zigbee.ZigBeeDevice;
import org.energy_home.jemma.ah.zigbee.ZigBeeDeviceListener;
import org.energy_home.jemma.ah.zigbee.zcl.IZclAttributeDescriptor;
import org.energy_home.jemma.ah.zigbee.zcl.ZclValidationException;
import org.energy_home.jemma.ah.zigbee.zcl.lib.ZclServiceCluster;
import org.energy_home.jemma.ah.zigbee.zcl.lib.types.ZclDataTypeBitmap16;
import org.energy_home.jemma.ah.zigbee.zcl.lib.types.ZclDataTypeBitmap8;
import org.energy_home.jemma.ah.zigbee.zcl.lib.types.ZclDataTypeBoolean;
import org.energy_home.jemma.ah.zigbee.zcl.lib.types.ZclDataTypeEnum8;
import org.energy_home.jemma.ah.zigbee.zcl.lib.types.ZclDataTypeString;
import org.energy_home.jemma.ah.zigbee.zcl.lib.types.ZclDataTypeUI16;
import org.energy_home.jemma.ah.zigbee.zcl.lib.types.ZclDataTypeUI32;
import org.energy_home.jemma.ah.zigbee.zcl.lib.types.ZclDataTypeUI8;

/**
 * This file is part of JEMMA - http://jemma.energy-home.org (C) Copyright 2014
 * Telecom Italia (http://www.telecomitalia.it)
 * 
 * JEMMA is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License (LGPL) version 3 or later as
 * published by the Free Software Foundation, which accompanies this
 * distribution and is available at http://www.gnu.org/licenses/lgpl.html
 * 
 * JEMMA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License (LGPL) for
 * more details.
 * 
 * This class has been generated by the Jemma ZigBee Cluster Library generator,
 * version 2.0.13-SNAPSHOT
 * 
 */
public class ZclDoorLockServer extends ZclServiceCluster implements DoorLockServer, ZigBeeDeviceListener {

	public final static short CLUSTER_ID = 257;
	static Map attributesMapByName = null;
	static Map attributesMapById = null;
	static ZclAttributeDescriptor[] attributeDescriptors = null;

	static {
		attributeDescriptors = new ZclAttributeDescriptor[43];
		attributeDescriptors[0] = new ZclAttributeDescriptor(0, ZclDoorLockServer.ATTR_LockState_NAME, new ZclDataTypeEnum8(), null, true, 1);
		attributeDescriptors[1] = new ZclAttributeDescriptor(1, ZclDoorLockServer.ATTR_LockType_NAME, new ZclDataTypeEnum8(), null, true, 1);
		attributeDescriptors[2] = new ZclAttributeDescriptor(2, ZclDoorLockServer.ATTR_ActuatorEnabled_NAME, new ZclDataTypeBoolean(), null, true, 1);
		attributeDescriptors[3] = new ZclAttributeDescriptor(3, ZclDoorLockServer.ATTR_DoorState_NAME, new ZclDataTypeEnum8(), null, true, 1);
		attributeDescriptors[4] = new ZclAttributeDescriptor(4, ZclDoorLockServer.ATTR_DoorOpenEvents_NAME, new ZclDataTypeUI32(), null, true, 1);
		attributeDescriptors[5] = new ZclAttributeDescriptor(5, ZclDoorLockServer.ATTR_DoorClosedEvents_NAME, new ZclDataTypeUI32(), null, true, 1);
		attributeDescriptors[6] = new ZclAttributeDescriptor(6, ZclDoorLockServer.ATTR_OpenPeriod_NAME, new ZclDataTypeUI16(), null, true, 1);
		attributeDescriptors[7] = new ZclAttributeDescriptor(16, ZclDoorLockServer.ATTR_NumberofLogRecordsSupported_NAME, new ZclDataTypeUI16(), null, true, 1);
		attributeDescriptors[8] = new ZclAttributeDescriptor(17, ZclDoorLockServer.ATTR_NumberofTotalUsersSupported_NAME, new ZclDataTypeUI16(), null, true, 1);
		attributeDescriptors[9] = new ZclAttributeDescriptor(18, ZclDoorLockServer.ATTR_NumberofPINUsersSupported_NAME, new ZclDataTypeUI16(), null, true, 1);
		attributeDescriptors[10] = new ZclAttributeDescriptor(19, ZclDoorLockServer.ATTR_NumberofRFIDUsersSupported_NAME, new ZclDataTypeUI16(), null, true, 1);
		attributeDescriptors[11] = new ZclAttributeDescriptor(20, ZclDoorLockServer.ATTR_NumberofWeekDaySchedulesSupportedPerUser_NAME, new ZclDataTypeUI8(), null, true, 1);
		attributeDescriptors[12] = new ZclAttributeDescriptor(21, ZclDoorLockServer.ATTR_NumberofYearDaySchedulesSupportedPerUser_NAME, new ZclDataTypeUI8(), null, true, 1);
		attributeDescriptors[13] = new ZclAttributeDescriptor(22, ZclDoorLockServer.ATTR_NumberofHolidaySchedulesSupported_NAME, new ZclDataTypeUI8(), null, true, 1);
		attributeDescriptors[14] = new ZclAttributeDescriptor(23, ZclDoorLockServer.ATTR_MaxPINCodeLength_NAME, new ZclDataTypeUI8(), null, true, 1);
		attributeDescriptors[15] = new ZclAttributeDescriptor(24, ZclDoorLockServer.ATTR_MinPINCodeLength_NAME, new ZclDataTypeUI8(), null, true, 1);
		attributeDescriptors[16] = new ZclAttributeDescriptor(25, ZclDoorLockServer.ATTR_MaxRFIDCodeLength_NAME, new ZclDataTypeUI8(), null, true, 1);
		attributeDescriptors[17] = new ZclAttributeDescriptor(26, ZclDoorLockServer.ATTR_MinRFIDCodeLength_NAME, new ZclDataTypeUI8(), null, true, 1);
		attributeDescriptors[18] = new ZclAttributeDescriptor(32, ZclDoorLockServer.ATTR_EnableLogging_NAME, new ZclDataTypeBoolean(), null, true, 1);
		attributeDescriptors[19] = new ZclAttributeDescriptor(33, ZclDoorLockServer.ATTR_Language_NAME, new ZclDataTypeString(24), null, true, 1);
		attributeDescriptors[20] = new ZclAttributeDescriptor(34, ZclDoorLockServer.ATTR_LEDSettings_NAME, new ZclDataTypeUI8(), null, true, 1);
		attributeDescriptors[21] = new ZclAttributeDescriptor(35, ZclDoorLockServer.ATTR_AutoRelockTime_NAME, new ZclDataTypeUI32(), null, true, 1);
		attributeDescriptors[22] = new ZclAttributeDescriptor(36, ZclDoorLockServer.ATTR_SoundVolume_NAME, new ZclDataTypeUI8(), null, true, 1);
		attributeDescriptors[23] = new ZclAttributeDescriptor(37, ZclDoorLockServer.ATTR_Operatingmode_NAME, new ZclDataTypeEnum8(), null, true, 1);
		attributeDescriptors[24] = new ZclAttributeDescriptor(38, ZclDoorLockServer.ATTR_SupportedOperatingModes_NAME, new ZclDataTypeBitmap16(), null, true, 1);
		attributeDescriptors[25] = new ZclAttributeDescriptor(39, ZclDoorLockServer.ATTR_DefaultConfigurationRegister_NAME, new ZclDataTypeBitmap16(), null, true, 1);
		attributeDescriptors[26] = new ZclAttributeDescriptor(40, ZclDoorLockServer.ATTR_EnableLocalProgramming_NAME, new ZclDataTypeBoolean(), null, true, 1);
		attributeDescriptors[27] = new ZclAttributeDescriptor(41, ZclDoorLockServer.ATTR_EnableOneTouchLocking_NAME, new ZclDataTypeBoolean(), null, true, 1);
		attributeDescriptors[28] = new ZclAttributeDescriptor(42, ZclDoorLockServer.ATTR_EnableInsideStatusLED_NAME, new ZclDataTypeBoolean(), null, true, 1);
		attributeDescriptors[29] = new ZclAttributeDescriptor(43, ZclDoorLockServer.ATTR_EnablePrivacyModeButton_NAME, new ZclDataTypeBoolean(), null, true, 1);
		attributeDescriptors[30] = new ZclAttributeDescriptor(48, ZclDoorLockServer.ATTR_Wrongcodeentrylimit_NAME, new ZclDataTypeUI8(), null, true, 1);
		attributeDescriptors[31] = new ZclAttributeDescriptor(49, ZclDoorLockServer.ATTR_UserCodeTemporaryDisableTime_NAME, new ZclDataTypeUI8(), null, true, 1);
		attributeDescriptors[32] = new ZclAttributeDescriptor(50, ZclDoorLockServer.ATTR_SendPINovertheAir_NAME, new ZclDataTypeBoolean(), null, true, 1);
		attributeDescriptors[33] = new ZclAttributeDescriptor(51, ZclDoorLockServer.ATTR_RequirePINforRFOperation_NAME, new ZclDataTypeBoolean(), null, true, 1);
		attributeDescriptors[34] = new ZclAttributeDescriptor(52, ZclDoorLockServer.ATTR_ZigBeeSecurityLevel_NAME, new ZclDataTypeUI8(), null, true, 1);
		attributeDescriptors[35] = new ZclAttributeDescriptor(64, ZclDoorLockServer.ATTR_AlarmMask_NAME, new ZclDataTypeBitmap16(), null, true, 1);
		attributeDescriptors[36] = new ZclAttributeDescriptor(65, ZclDoorLockServer.ATTR_KeypadOperationEventMask_NAME, new ZclDataTypeBitmap16(), null, true, 1);
		attributeDescriptors[37] = new ZclAttributeDescriptor(66, ZclDoorLockServer.ATTR_RFOperationEventMask_NAME, new ZclDataTypeBitmap16(), null, true, 1);
		attributeDescriptors[38] = new ZclAttributeDescriptor(67, ZclDoorLockServer.ATTR_ManualOperationEventMask_NAME, new ZclDataTypeBitmap16(), null, true, 1);
		attributeDescriptors[39] = new ZclAttributeDescriptor(68, ZclDoorLockServer.ATTR_RFIDOperationEventMask_NAME, new ZclDataTypeBitmap16(), null, true, 1);
		attributeDescriptors[40] = new ZclAttributeDescriptor(69, ZclDoorLockServer.ATTR_KeypadProgrammingEventMask_NAME, new ZclDataTypeBitmap16(), null, true, 1);
		attributeDescriptors[41] = new ZclAttributeDescriptor(70, ZclDoorLockServer.ATTR_RFProgrammingEventMask_NAME, new ZclDataTypeBitmap16(), null, true, 1);
		attributeDescriptors[42] = new ZclAttributeDescriptor(71, ZclDoorLockServer.ATTR_RFIDProgrammingEventMask_NAME, new ZclDataTypeBitmap16(), null, true, 1);
		attributesMapByName = fillAttributesMapsByName(attributeDescriptors, attributesMapByName);
		attributesMapById = fillAttributesMapsById(attributeDescriptors, attributesMapById);
	}

	public ZclDoorLockServer() throws ApplianceException {
		super();
	}

	public boolean notifyZclFrame(short clusterId, IZclFrame zclFrame) throws Exception {
		boolean handled;
		handled = super.notifyZclFrame(clusterId, zclFrame);
		if (handled) {
			return handled;
		}
		int commandId = zclFrame.getCommandId();
		if (zclFrame.isClientToServer()) {
			throw new ZclValidationException("invalid direction field");
		}
		IZclFrame responseZclFrame = null;
		ZigBeeDevice device = getZigBeeDevice();
		int statusCode = ZCL.SUCCESS;
		org.energy_home.jemma.ah.cluster.zigbee.closures.DoorLockClient c = ((org.energy_home.jemma.ah.cluster.zigbee.closures.DoorLockClient) getSinglePeerCluster((DoorLockClient.class.getName())));
		switch (commandId) {
		case 32:
			responseZclFrame = parseOperationEventNotification(c, zclFrame);
			break;
		case 33:
			responseZclFrame = parseProgrammingEventNotification(c, zclFrame);
			break;
		default:
			return false;
		}
		if (responseZclFrame == null) {
			if (!zclFrame.isDefaultResponseDisabled()) {
				responseZclFrame = getDefaultResponse(zclFrame, statusCode);
			}
		} else {
			device.post(ZclDoorLockServer.CLUSTER_ID, responseZclFrame);
		}
		return true;
	}

	protected int getClusterId() {
		return CLUSTER_ID;
	}

	protected IZclAttributeDescriptor getAttributeDescriptor(String name) {
		return ((IZclAttributeDescriptor) attributesMapByName.get(name));
	}

	protected IZclAttributeDescriptor getAttributeDescriptor(int attrId) {
		return ((IZclAttributeDescriptor) attributesMapById.get(attrId));
	}

	protected Collection getAttributeDescriptors() {
		return (attributesMapByName.values());
	}

	public LockDoorResponse execLockDoor(String PINRFIDCode, IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		int size = 0;
		size += ZclDataTypeString.zclSize(PINRFIDCode);
		ZclFrame zclFrame = new ZclFrame(1, size);
		zclFrame.setCommandId(0);
		ZclDataTypeString.zclSerialize(zclFrame, PINRFIDCode);
		IZclFrame zclResponseFrame = issueExec(zclFrame, 0, context);
		setCachedAttributeObject(0, new Short((short) 1));
		return (ZclLockDoorResponse.zclParse(zclResponseFrame));
	}

	public UnlockDoorResponse execUnlockDoor(String PINRFIDCode, IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		int size = 0;
		size += ZclDataTypeString.zclSize(PINRFIDCode);
		ZclFrame zclFrame = new ZclFrame(1, size);
		zclFrame.setCommandId(1);
		ZclDataTypeString.zclSerialize(zclFrame, PINRFIDCode);
		IZclFrame zclResponseFrame = issueExec(zclFrame, 1, context);
		setCachedAttributeObject(0, new Short((short) 2));
		return (ZclUnlockDoorResponse.zclParse(zclResponseFrame));
	}

	public ToggleResponse execToggle(String PINRFIDCode, IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		int size = 0;
		size += ZclDataTypeString.zclSize(PINRFIDCode);
		ZclFrame zclFrame = new ZclFrame(1, size);
		zclFrame.setCommandId(2);
		ZclDataTypeString.zclSerialize(zclFrame, PINRFIDCode);
		IZclFrame zclResponseFrame = issueExec(zclFrame, 2, context);
		return (ZclToggleResponse.zclParse(zclResponseFrame));
	}

	public UnlockWithTimeoutResponse execUnlockWithTimeout(int TimeoutInSeconds, String PINRFIDCode, IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		int size = 0;
		size += ZclDataTypeUI16.zclSize(TimeoutInSeconds);
		size += ZclDataTypeString.zclSize(PINRFIDCode);
		ZclFrame zclFrame = new ZclFrame(1, size);
		zclFrame.setCommandId(3);
		ZclDataTypeUI16.zclSerialize(zclFrame, TimeoutInSeconds);
		ZclDataTypeString.zclSerialize(zclFrame, PINRFIDCode);
		IZclFrame zclResponseFrame = issueExec(zclFrame, 3, context);
		return (ZclUnlockWithTimeoutResponse.zclParse(zclResponseFrame));
	}

	public GetLogRecordResponse execGetLogRecord(int LogIndex, IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		int size = 0;
		size += ZclDataTypeUI16.zclSize(LogIndex);
		ZclFrame zclFrame = new ZclFrame(1, size);
		zclFrame.setCommandId(4);
		ZclDataTypeUI16.zclSerialize(zclFrame, LogIndex);
		IZclFrame zclResponseFrame = issueExec(zclFrame, 4, context);
		return (ZclGetLogRecordResponse.zclParse(zclResponseFrame));
	}

	public SetPINCodeResponse execSetPINCode(int UserID, short UserStatus, short UserType, String PIN, IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		int size = 0;
		size += ZclDataTypeUI16.zclSize(UserID);
		size += ZclDataTypeUI8.zclSize(UserStatus);
		size += ZclDataTypeUI8.zclSize(UserType);
		size += ZclDataTypeString.zclSize(PIN);
		ZclFrame zclFrame = new ZclFrame(1, size);
		zclFrame.setCommandId(5);
		ZclDataTypeUI16.zclSerialize(zclFrame, UserID);
		ZclDataTypeUI8.zclSerialize(zclFrame, UserStatus);
		ZclDataTypeUI8.zclSerialize(zclFrame, UserType);
		ZclDataTypeString.zclSerialize(zclFrame, PIN);
		IZclFrame zclResponseFrame = issueExec(zclFrame, 5, context);
		return (ZclSetPINCodeResponse.zclParse(zclResponseFrame));
	}

	public GetPINCodeResponse execGetPINCode(int UserID, IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		int size = 0;
		size += ZclDataTypeUI16.zclSize(UserID);
		ZclFrame zclFrame = new ZclFrame(1, size);
		zclFrame.setCommandId(6);
		ZclDataTypeUI16.zclSerialize(zclFrame, UserID);
		IZclFrame zclResponseFrame = issueExec(zclFrame, 6, context);
		return (ZclGetPINCodeResponse.zclParse(zclResponseFrame));
	}

	public ClearPINCodeResponse execClearPINCode(int UserID, IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		int size = 0;
		size += ZclDataTypeUI16.zclSize(UserID);
		ZclFrame zclFrame = new ZclFrame(1, size);
		zclFrame.setCommandId(7);
		ZclDataTypeUI16.zclSerialize(zclFrame, UserID);
		IZclFrame zclResponseFrame = issueExec(zclFrame, 7, context);
		return (ZclClearPINCodeResponse.zclParse(zclResponseFrame));
	}

	public ClearAllPINCodesResponse execClearAllPINCodes(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		ZclFrame zclFrame = new ZclFrame(1);
		zclFrame.setCommandId(8);
		IZclFrame zclResponseFrame = issueExec(zclFrame, 8, context);
		return (ZclClearAllPINCodesResponse.zclParse(zclResponseFrame));
	}

	public SetUserStatusResponse execSetUserStatus(int UserID, short UserStatus, IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		int size = 0;
		size += ZclDataTypeUI16.zclSize(UserID);
		size += ZclDataTypeUI8.zclSize(UserStatus);
		ZclFrame zclFrame = new ZclFrame(1, size);
		zclFrame.setCommandId(9);
		ZclDataTypeUI16.zclSerialize(zclFrame, UserID);
		ZclDataTypeUI8.zclSerialize(zclFrame, UserStatus);
		IZclFrame zclResponseFrame = issueExec(zclFrame, 9, context);
		return (ZclSetUserStatusResponse.zclParse(zclResponseFrame));
	}

	public GetUserStatusResponse execGetUserStatus(int UserID, IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		int size = 0;
		size += ZclDataTypeUI16.zclSize(UserID);
		ZclFrame zclFrame = new ZclFrame(1, size);
		zclFrame.setCommandId(10);
		ZclDataTypeUI16.zclSerialize(zclFrame, UserID);
		IZclFrame zclResponseFrame = issueExec(zclFrame, 10, context);
		return (ZclGetUserStatusResponse.zclParse(zclResponseFrame));
	}

	public SetWeekdayScheduleResponse execSetWeekdaySchedule(short ScheduleID, int UserID, short DaysMask, short StartHour, short StartMinute, short EndHour, short EndMinute, IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		int size = 0;
		size += ZclDataTypeUI8.zclSize(ScheduleID);
		size += ZclDataTypeUI16.zclSize(UserID);
		size += ZclDataTypeBitmap8.zclSize(DaysMask);
		size += ZclDataTypeUI8.zclSize(StartHour);
		size += ZclDataTypeUI8.zclSize(StartMinute);
		size += ZclDataTypeUI8.zclSize(EndHour);
		size += ZclDataTypeUI8.zclSize(EndMinute);
		ZclFrame zclFrame = new ZclFrame(1, size);
		zclFrame.setCommandId(11);
		ZclDataTypeUI8.zclSerialize(zclFrame, ScheduleID);
		ZclDataTypeUI16.zclSerialize(zclFrame, UserID);
		ZclDataTypeBitmap8.zclSerialize(zclFrame, DaysMask);
		ZclDataTypeUI8.zclSerialize(zclFrame, StartHour);
		ZclDataTypeUI8.zclSerialize(zclFrame, StartMinute);
		ZclDataTypeUI8.zclSerialize(zclFrame, EndHour);
		ZclDataTypeUI8.zclSerialize(zclFrame, EndMinute);
		IZclFrame zclResponseFrame = issueExec(zclFrame, 11, context);
		return (ZclSetWeekdayScheduleResponse.zclParse(zclResponseFrame));
	}

	public GetWeekdayScheduleResponse execGetWeekdaySchedule(short ScheduleID, int UserID, IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		int size = 0;
		size += ZclDataTypeUI8.zclSize(ScheduleID);
		size += ZclDataTypeUI16.zclSize(UserID);
		ZclFrame zclFrame = new ZclFrame(1, size);
		zclFrame.setCommandId(12);
		ZclDataTypeUI8.zclSerialize(zclFrame, ScheduleID);
		ZclDataTypeUI16.zclSerialize(zclFrame, UserID);
		IZclFrame zclResponseFrame = issueExec(zclFrame, 12, context);
		return (ZclGetWeekdayScheduleResponse.zclParse(zclResponseFrame));
	}

	public ClearWeekdayScheduleResponse execClearWeekdaySchedule(short ScheduleID, int UserID, IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		int size = 0;
		size += ZclDataTypeUI8.zclSize(ScheduleID);
		size += ZclDataTypeUI16.zclSize(UserID);
		ZclFrame zclFrame = new ZclFrame(1, size);
		zclFrame.setCommandId(13);
		ZclDataTypeUI8.zclSerialize(zclFrame, ScheduleID);
		ZclDataTypeUI16.zclSerialize(zclFrame, UserID);
		IZclFrame zclResponseFrame = issueExec(zclFrame, 13, context);
		return (ZclClearWeekdayScheduleResponse.zclParse(zclResponseFrame));
	}

	public SetYearDayScheduleResponse execSetYearDaySchedule(short ScheduleID, int UserID, long ZigBeeLocalStartTime, long ZigBeeLocalEndTime, IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		int size = 0;
		size += ZclDataTypeUI8.zclSize(ScheduleID);
		size += ZclDataTypeUI16.zclSize(UserID);
		size += ZclDataTypeUI32.zclSize(ZigBeeLocalStartTime);
		size += ZclDataTypeUI32.zclSize(ZigBeeLocalEndTime);
		ZclFrame zclFrame = new ZclFrame(1, size);
		zclFrame.setCommandId(14);
		ZclDataTypeUI8.zclSerialize(zclFrame, ScheduleID);
		ZclDataTypeUI16.zclSerialize(zclFrame, UserID);
		ZclDataTypeUI32.zclSerialize(zclFrame, ZigBeeLocalStartTime);
		ZclDataTypeUI32.zclSerialize(zclFrame, ZigBeeLocalEndTime);
		IZclFrame zclResponseFrame = issueExec(zclFrame, 14, context);
		return (ZclSetYearDayScheduleResponse.zclParse(zclResponseFrame));
	}

	public GetYearDayScheduleResponse execGetYearDaySchedule(short ScheduleID, int UserID, IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		int size = 0;
		size += ZclDataTypeUI8.zclSize(ScheduleID);
		size += ZclDataTypeUI16.zclSize(UserID);
		ZclFrame zclFrame = new ZclFrame(1, size);
		zclFrame.setCommandId(15);
		ZclDataTypeUI8.zclSerialize(zclFrame, ScheduleID);
		ZclDataTypeUI16.zclSerialize(zclFrame, UserID);
		IZclFrame zclResponseFrame = issueExec(zclFrame, 15, context);
		return (ZclGetYearDayScheduleResponse.zclParse(zclResponseFrame));
	}

	public ClearYearDayScheduleResponse execClearYearDaySchedule(short ScheduleID, int UserID, IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		int size = 0;
		size += ZclDataTypeUI8.zclSize(ScheduleID);
		size += ZclDataTypeUI16.zclSize(UserID);
		ZclFrame zclFrame = new ZclFrame(1, size);
		zclFrame.setCommandId(16);
		ZclDataTypeUI8.zclSerialize(zclFrame, ScheduleID);
		ZclDataTypeUI16.zclSerialize(zclFrame, UserID);
		IZclFrame zclResponseFrame = issueExec(zclFrame, 16, context);
		return (ZclClearYearDayScheduleResponse.zclParse(zclResponseFrame));
	}

	public SetHolidayScheduleResponse execSetHolidaySchedule(short HolidayScheduleID, long ZigBeeLocalStartTime, long ZigBeeLocalEndTime, short OperatingModeDuringHoliday, IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		int size = 0;
		size += ZclDataTypeUI8.zclSize(HolidayScheduleID);
		size += ZclDataTypeUI32.zclSize(ZigBeeLocalStartTime);
		size += ZclDataTypeUI32.zclSize(ZigBeeLocalEndTime);
		size += ZclDataTypeEnum8.zclSize(OperatingModeDuringHoliday);
		ZclFrame zclFrame = new ZclFrame(1, size);
		zclFrame.setCommandId(17);
		ZclDataTypeUI8.zclSerialize(zclFrame, HolidayScheduleID);
		ZclDataTypeUI32.zclSerialize(zclFrame, ZigBeeLocalStartTime);
		ZclDataTypeUI32.zclSerialize(zclFrame, ZigBeeLocalEndTime);
		ZclDataTypeEnum8.zclSerialize(zclFrame, OperatingModeDuringHoliday);
		IZclFrame zclResponseFrame = issueExec(zclFrame, 17, context);
		return (ZclSetHolidayScheduleResponse.zclParse(zclResponseFrame));
	}

	public GetHolidayScheduleResponse execGetHolidaySchedule(short HolidayScheduleID, IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		int size = 0;
		size += ZclDataTypeUI8.zclSize(HolidayScheduleID);
		ZclFrame zclFrame = new ZclFrame(1, size);
		zclFrame.setCommandId(18);
		ZclDataTypeUI8.zclSerialize(zclFrame, HolidayScheduleID);
		IZclFrame zclResponseFrame = issueExec(zclFrame, 18, context);
		return (ZclGetHolidayScheduleResponse.zclParse(zclResponseFrame));
	}

	public ClearHolidayScheduleResponse execClearHolidaySchedule(short HolidayScheduleID, IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		int size = 0;
		size += ZclDataTypeUI8.zclSize(HolidayScheduleID);
		ZclFrame zclFrame = new ZclFrame(1, size);
		zclFrame.setCommandId(19);
		ZclDataTypeUI8.zclSerialize(zclFrame, HolidayScheduleID);
		IZclFrame zclResponseFrame = issueExec(zclFrame, 19, context);
		return (ZclClearHolidayScheduleResponse.zclParse(zclResponseFrame));
	}

	public SetUsertypeResponse execSetUsertype(int UserID, short UserType, IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		int size = 0;
		size += ZclDataTypeUI16.zclSize(UserID);
		size += ZclDataTypeEnum8.zclSize(UserType);
		ZclFrame zclFrame = new ZclFrame(1, size);
		zclFrame.setCommandId(20);
		ZclDataTypeUI16.zclSerialize(zclFrame, UserID);
		ZclDataTypeEnum8.zclSerialize(zclFrame, UserType);
		IZclFrame zclResponseFrame = issueExec(zclFrame, 20, context);
		return (ZclSetUsertypeResponse.zclParse(zclResponseFrame));
	}

	public GetUsertypeResponse execGetUsertype(int UserID, IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		int size = 0;
		size += ZclDataTypeUI16.zclSize(UserID);
		ZclFrame zclFrame = new ZclFrame(1, size);
		zclFrame.setCommandId(21);
		ZclDataTypeUI16.zclSerialize(zclFrame, UserID);
		IZclFrame zclResponseFrame = issueExec(zclFrame, 21, context);
		return (ZclGetUsertypeResponse.zclParse(zclResponseFrame));
	}

	public SetRFIDCodeResponse execSetRFIDCode(int UserID, short UserStatus, short UserType, String RFIDCode, IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		int size = 0;
		size += ZclDataTypeUI16.zclSize(UserID);
		size += ZclDataTypeUI8.zclSize(UserStatus);
		size += ZclDataTypeUI8.zclSize(UserType);
		size += ZclDataTypeString.zclSize(RFIDCode);
		ZclFrame zclFrame = new ZclFrame(1, size);
		zclFrame.setCommandId(22);
		ZclDataTypeUI16.zclSerialize(zclFrame, UserID);
		ZclDataTypeUI8.zclSerialize(zclFrame, UserStatus);
		ZclDataTypeUI8.zclSerialize(zclFrame, UserType);
		ZclDataTypeString.zclSerialize(zclFrame, RFIDCode);
		IZclFrame zclResponseFrame = issueExec(zclFrame, 22, context);
		return (ZclSetRFIDCodeResponse.zclParse(zclResponseFrame));
	}

	public GetRFIDCodeResponse execGetRFIDCode(int UserID, IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		int size = 0;
		size += ZclDataTypeUI16.zclSize(UserID);
		ZclFrame zclFrame = new ZclFrame(1, size);
		zclFrame.setCommandId(23);
		ZclDataTypeUI16.zclSerialize(zclFrame, UserID);
		IZclFrame zclResponseFrame = issueExec(zclFrame, 23, context);
		return (ZclGetRFIDCodeResponse.zclParse(zclResponseFrame));
	}

	public ClearRFIDCodeResponse execClearRFIDCode(int UserID, IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		int size = 0;
		size += ZclDataTypeUI16.zclSize(UserID);
		ZclFrame zclFrame = new ZclFrame(1, size);
		zclFrame.setCommandId(24);
		ZclDataTypeUI16.zclSerialize(zclFrame, UserID);
		IZclFrame zclResponseFrame = issueExec(zclFrame, 24, context);
		return (ZclClearRFIDCodeResponse.zclParse(zclResponseFrame));
	}

	public ClearAllRFIDCodesResponse execClearAllRFIDCodes(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		ZclFrame zclFrame = new ZclFrame(1);
		zclFrame.setCommandId(25);
		IZclFrame zclResponseFrame = issueExec(zclFrame, 25, context);
		return (ZclClearAllRFIDCodesResponse.zclParse(zclResponseFrame));
	}

	protected IZclFrame parseOperationEventNotification(org.energy_home.jemma.ah.cluster.zigbee.closures.DoorLockClient o, IZclFrame zclFrame) throws ApplianceException, ServiceClusterException {
		short OperationEventSource = ZclDataTypeUI8.zclParse(zclFrame);
		short OperationEventCode = ZclDataTypeUI8.zclParse(zclFrame);
		int UserID = ZclDataTypeUI16.zclParse(zclFrame);
		short PIN = ZclDataTypeUI8.zclParse(zclFrame);
		long ZigBeeLocalTime = ZclDataTypeUI32.zclParse(zclFrame);
		String Data = ZclDataTypeString.zclParse(zclFrame);
		if (o == null) {
			return null;
		}
		o.execOperationEventNotification(OperationEventSource, OperationEventCode, UserID, PIN, ZigBeeLocalTime, Data, endPoint.getDefaultRequestContext());
		return null;
	}

	protected IZclFrame parseProgrammingEventNotification(org.energy_home.jemma.ah.cluster.zigbee.closures.DoorLockClient o, IZclFrame zclFrame) throws ApplianceException, ServiceClusterException {
		short ProgramEventSource = ZclDataTypeUI8.zclParse(zclFrame);
		short OperationEventCode = ZclDataTypeUI8.zclParse(zclFrame);
		int UserID = ZclDataTypeUI16.zclParse(zclFrame);
		short PIN = ZclDataTypeUI8.zclParse(zclFrame);
		short UserType = ZclDataTypeUI8.zclParse(zclFrame);
		short UserStatus = ZclDataTypeUI8.zclParse(zclFrame);
		long ZigBeeLocalTime = ZclDataTypeUI32.zclParse(zclFrame);
		String Data = ZclDataTypeString.zclParse(zclFrame);
		if (o == null) {
			return null;
		}
		o.execProgrammingEventNotification(ProgramEventSource, OperationEventCode, UserID, PIN, UserType, UserStatus, ZigBeeLocalTime, Data, endPoint.getDefaultRequestContext());
		return null;
	}

	public short getLockState(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		if (context != null) {
			Short objectResult = null;
			objectResult = ((Short) getValidCachedAttributeObject(0, context.getMaxAgeForAttributeValues()));
			if (objectResult != null) {
				return objectResult.shortValue();
			}
		}
		IZclFrame zclFrame = readAttribute(0, context);
		short v = ZclDataTypeEnum8.zclParse(zclFrame);
		setCachedAttributeObject(0, new Short(v));
		return v;
	}

	public short getLockType(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		if (context != null) {
			Short objectResult = null;
			objectResult = ((Short) getValidCachedAttributeObject(1, context.getMaxAgeForAttributeValues()));
			if (objectResult != null) {
				return objectResult.shortValue();
			}
		}
		IZclFrame zclFrame = readAttribute(1, context);
		short v = ZclDataTypeEnum8.zclParse(zclFrame);
		setCachedAttributeObject(1, new Short(v));
		return v;
	}

	public boolean getActuatorEnabled(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		if (context != null) {
			Boolean objectResult = null;
			objectResult = ((Boolean) getValidCachedAttributeObject(2, context.getMaxAgeForAttributeValues()));
			if (objectResult != null) {
				return objectResult.booleanValue();
			}
		}
		IZclFrame zclFrame = readAttribute(2, context);
		boolean v = ZclDataTypeBoolean.zclParse(zclFrame);
		setCachedAttributeObject(2, new Boolean(v));
		return v;
	}

	public short getDoorState(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		if (context != null) {
			Short objectResult = null;
			objectResult = ((Short) getValidCachedAttributeObject(3, context.getMaxAgeForAttributeValues()));
			if (objectResult != null) {
				return objectResult.shortValue();
			}
		}
		IZclFrame zclFrame = readAttribute(3, context);
		short v = ZclDataTypeEnum8.zclParse(zclFrame);
		setCachedAttributeObject(3, new Short(v));
		return v;
	}

	public long getDoorOpenEvents(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		if (context != null) {
			Long objectResult = null;
			objectResult = ((Long) getValidCachedAttributeObject(4, context.getMaxAgeForAttributeValues()));
			if (objectResult != null) {
				return objectResult.longValue();
			}
		}
		IZclFrame zclFrame = readAttribute(4, context);
		long v = ZclDataTypeUI32.zclParse(zclFrame);
		setCachedAttributeObject(4, new Long(v));
		return v;
	}

	public long getDoorClosedEvents(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		if (context != null) {
			Long objectResult = null;
			objectResult = ((Long) getValidCachedAttributeObject(5, context.getMaxAgeForAttributeValues()));
			if (objectResult != null) {
				return objectResult.longValue();
			}
		}
		IZclFrame zclFrame = readAttribute(5, context);
		long v = ZclDataTypeUI32.zclParse(zclFrame);
		setCachedAttributeObject(5, new Long(v));
		return v;
	}

	public int getOpenPeriod(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		if (context != null) {
			Integer objectResult = null;
			objectResult = ((Integer) getValidCachedAttributeObject(6, context.getMaxAgeForAttributeValues()));
			if (objectResult != null) {
				return objectResult.intValue();
			}
		}
		IZclFrame zclFrame = readAttribute(6, context);
		int v = ZclDataTypeUI16.zclParse(zclFrame);
		setCachedAttributeObject(6, new Integer(v));
		return v;
	}

	public int getNumberofLogRecordsSupported(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		if (context != null) {
			Integer objectResult = null;
			objectResult = ((Integer) getValidCachedAttributeObject(16, context.getMaxAgeForAttributeValues()));
			if (objectResult != null) {
				return objectResult.intValue();
			}
		}
		IZclFrame zclFrame = readAttribute(16, context);
		int v = ZclDataTypeUI16.zclParse(zclFrame);
		setCachedAttributeObject(16, new Integer(v));
		return v;
	}

	public int getNumberofTotalUsersSupported(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		if (context != null) {
			Integer objectResult = null;
			objectResult = ((Integer) getValidCachedAttributeObject(17, context.getMaxAgeForAttributeValues()));
			if (objectResult != null) {
				return objectResult.intValue();
			}
		}
		IZclFrame zclFrame = readAttribute(17, context);
		int v = ZclDataTypeUI16.zclParse(zclFrame);
		setCachedAttributeObject(17, new Integer(v));
		return v;
	}

	public int getNumberofPINUsersSupported(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		if (context != null) {
			Integer objectResult = null;
			objectResult = ((Integer) getValidCachedAttributeObject(18, context.getMaxAgeForAttributeValues()));
			if (objectResult != null) {
				return objectResult.intValue();
			}
		}
		IZclFrame zclFrame = readAttribute(18, context);
		int v = ZclDataTypeUI16.zclParse(zclFrame);
		setCachedAttributeObject(18, new Integer(v));
		return v;
	}

	public int getNumberofRFIDUsersSupported(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		if (context != null) {
			Integer objectResult = null;
			objectResult = ((Integer) getValidCachedAttributeObject(19, context.getMaxAgeForAttributeValues()));
			if (objectResult != null) {
				return objectResult.intValue();
			}
		}
		IZclFrame zclFrame = readAttribute(19, context);
		int v = ZclDataTypeUI16.zclParse(zclFrame);
		setCachedAttributeObject(19, new Integer(v));
		return v;
	}

	public short getNumberofWeekDaySchedulesSupportedPerUser(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		if (context != null) {
			Short objectResult = null;
			objectResult = ((Short) getValidCachedAttributeObject(20, context.getMaxAgeForAttributeValues()));
			if (objectResult != null) {
				return objectResult.shortValue();
			}
		}
		IZclFrame zclFrame = readAttribute(20, context);
		short v = ZclDataTypeUI8.zclParse(zclFrame);
		setCachedAttributeObject(20, new Short(v));
		return v;
	}

	public short getNumberofYearDaySchedulesSupportedPerUser(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		if (context != null) {
			Short objectResult = null;
			objectResult = ((Short) getValidCachedAttributeObject(21, context.getMaxAgeForAttributeValues()));
			if (objectResult != null) {
				return objectResult.shortValue();
			}
		}
		IZclFrame zclFrame = readAttribute(21, context);
		short v = ZclDataTypeUI8.zclParse(zclFrame);
		setCachedAttributeObject(21, new Short(v));
		return v;
	}

	public short getNumberofHolidaySchedulesSupported(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		if (context != null) {
			Short objectResult = null;
			objectResult = ((Short) getValidCachedAttributeObject(22, context.getMaxAgeForAttributeValues()));
			if (objectResult != null) {
				return objectResult.shortValue();
			}
		}
		IZclFrame zclFrame = readAttribute(22, context);
		short v = ZclDataTypeUI8.zclParse(zclFrame);
		setCachedAttributeObject(22, new Short(v));
		return v;
	}

	public short getMaxPINCodeLength(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		if (context != null) {
			Short objectResult = null;
			objectResult = ((Short) getValidCachedAttributeObject(23, context.getMaxAgeForAttributeValues()));
			if (objectResult != null) {
				return objectResult.shortValue();
			}
		}
		IZclFrame zclFrame = readAttribute(23, context);
		short v = ZclDataTypeUI8.zclParse(zclFrame);
		setCachedAttributeObject(23, new Short(v));
		return v;
	}

	public short getMinPINCodeLength(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		if (context != null) {
			Short objectResult = null;
			objectResult = ((Short) getValidCachedAttributeObject(24, context.getMaxAgeForAttributeValues()));
			if (objectResult != null) {
				return objectResult.shortValue();
			}
		}
		IZclFrame zclFrame = readAttribute(24, context);
		short v = ZclDataTypeUI8.zclParse(zclFrame);
		setCachedAttributeObject(24, new Short(v));
		return v;
	}

	public short getMaxRFIDCodeLength(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		if (context != null) {
			Short objectResult = null;
			objectResult = ((Short) getValidCachedAttributeObject(25, context.getMaxAgeForAttributeValues()));
			if (objectResult != null) {
				return objectResult.shortValue();
			}
		}
		IZclFrame zclFrame = readAttribute(25, context);
		short v = ZclDataTypeUI8.zclParse(zclFrame);
		setCachedAttributeObject(25, new Short(v));
		return v;
	}

	public short getMinRFIDCodeLength(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		if (context != null) {
			Short objectResult = null;
			objectResult = ((Short) getValidCachedAttributeObject(26, context.getMaxAgeForAttributeValues()));
			if (objectResult != null) {
				return objectResult.shortValue();
			}
		}
		IZclFrame zclFrame = readAttribute(26, context);
		short v = ZclDataTypeUI8.zclParse(zclFrame);
		setCachedAttributeObject(26, new Short(v));
		return v;
	}

	public boolean getEnableLogging(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		if (context != null) {
			Boolean objectResult = null;
			objectResult = ((Boolean) getValidCachedAttributeObject(32, context.getMaxAgeForAttributeValues()));
			if (objectResult != null) {
				return objectResult.booleanValue();
			}
		}
		IZclFrame zclFrame = readAttribute(32, context);
		boolean v = ZclDataTypeBoolean.zclParse(zclFrame);
		setCachedAttributeObject(32, new Boolean(v));
		return v;
	}

	public String getLanguage(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		if (context != null) {
			String objectResult = null;
			objectResult = ((String) getValidCachedAttributeObject(33, context.getMaxAgeForAttributeValues()));
			if (objectResult != null) {
				return objectResult;
			}
		}
		IZclFrame zclFrame = readAttribute(33, context);
		String v = ZclDataTypeString.zclParse(zclFrame);
		setCachedAttributeObject(33, v);
		return v;
	}

	public short getLEDSettings(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		if (context != null) {
			Short objectResult = null;
			objectResult = ((Short) getValidCachedAttributeObject(34, context.getMaxAgeForAttributeValues()));
			if (objectResult != null) {
				return objectResult.shortValue();
			}
		}
		IZclFrame zclFrame = readAttribute(34, context);
		short v = ZclDataTypeUI8.zclParse(zclFrame);
		setCachedAttributeObject(34, new Short(v));
		return v;
	}

	public long getAutoRelockTime(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		if (context != null) {
			Long objectResult = null;
			objectResult = ((Long) getValidCachedAttributeObject(35, context.getMaxAgeForAttributeValues()));
			if (objectResult != null) {
				return objectResult.longValue();
			}
		}
		IZclFrame zclFrame = readAttribute(35, context);
		long v = ZclDataTypeUI32.zclParse(zclFrame);
		setCachedAttributeObject(35, new Long(v));
		return v;
	}

	public short getSoundVolume(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		if (context != null) {
			Short objectResult = null;
			objectResult = ((Short) getValidCachedAttributeObject(36, context.getMaxAgeForAttributeValues()));
			if (objectResult != null) {
				return objectResult.shortValue();
			}
		}
		IZclFrame zclFrame = readAttribute(36, context);
		short v = ZclDataTypeUI8.zclParse(zclFrame);
		setCachedAttributeObject(36, new Short(v));
		return v;
	}

	public short getOperatingmode(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		if (context != null) {
			Short objectResult = null;
			objectResult = ((Short) getValidCachedAttributeObject(37, context.getMaxAgeForAttributeValues()));
			if (objectResult != null) {
				return objectResult.shortValue();
			}
		}
		IZclFrame zclFrame = readAttribute(37, context);
		short v = ZclDataTypeEnum8.zclParse(zclFrame);
		setCachedAttributeObject(37, new Short(v));
		return v;
	}

	public int getSupportedOperatingModes(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		if (context != null) {
			Integer objectResult = null;
			objectResult = ((Integer) getValidCachedAttributeObject(38, context.getMaxAgeForAttributeValues()));
			if (objectResult != null) {
				return objectResult.intValue();
			}
		}
		IZclFrame zclFrame = readAttribute(38, context);
		int v = ZclDataTypeBitmap16.zclParse(zclFrame);
		setCachedAttributeObject(38, new Integer(v));
		return v;
	}

	public int getDefaultConfigurationRegister(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		if (context != null) {
			Integer objectResult = null;
			objectResult = ((Integer) getValidCachedAttributeObject(39, context.getMaxAgeForAttributeValues()));
			if (objectResult != null) {
				return objectResult.intValue();
			}
		}
		IZclFrame zclFrame = readAttribute(39, context);
		int v = ZclDataTypeBitmap16.zclParse(zclFrame);
		setCachedAttributeObject(39, new Integer(v));
		return v;
	}

	public boolean getEnableLocalProgramming(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		if (context != null) {
			Boolean objectResult = null;
			objectResult = ((Boolean) getValidCachedAttributeObject(40, context.getMaxAgeForAttributeValues()));
			if (objectResult != null) {
				return objectResult.booleanValue();
			}
		}
		IZclFrame zclFrame = readAttribute(40, context);
		boolean v = ZclDataTypeBoolean.zclParse(zclFrame);
		setCachedAttributeObject(40, new Boolean(v));
		return v;
	}

	public boolean getEnableOneTouchLocking(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		if (context != null) {
			Boolean objectResult = null;
			objectResult = ((Boolean) getValidCachedAttributeObject(41, context.getMaxAgeForAttributeValues()));
			if (objectResult != null) {
				return objectResult.booleanValue();
			}
		}
		IZclFrame zclFrame = readAttribute(41, context);
		boolean v = ZclDataTypeBoolean.zclParse(zclFrame);
		setCachedAttributeObject(41, new Boolean(v));
		return v;
	}

	public boolean getEnableInsideStatusLED(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		if (context != null) {
			Boolean objectResult = null;
			objectResult = ((Boolean) getValidCachedAttributeObject(42, context.getMaxAgeForAttributeValues()));
			if (objectResult != null) {
				return objectResult.booleanValue();
			}
		}
		IZclFrame zclFrame = readAttribute(42, context);
		boolean v = ZclDataTypeBoolean.zclParse(zclFrame);
		setCachedAttributeObject(42, new Boolean(v));
		return v;
	}

	public boolean getEnablePrivacyModeButton(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		if (context != null) {
			Boolean objectResult = null;
			objectResult = ((Boolean) getValidCachedAttributeObject(43, context.getMaxAgeForAttributeValues()));
			if (objectResult != null) {
				return objectResult.booleanValue();
			}
		}
		IZclFrame zclFrame = readAttribute(43, context);
		boolean v = ZclDataTypeBoolean.zclParse(zclFrame);
		setCachedAttributeObject(43, new Boolean(v));
		return v;
	}

	public short getWrongcodeentrylimit(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		if (context != null) {
			Short objectResult = null;
			objectResult = ((Short) getValidCachedAttributeObject(48, context.getMaxAgeForAttributeValues()));
			if (objectResult != null) {
				return objectResult.shortValue();
			}
		}
		IZclFrame zclFrame = readAttribute(48, context);
		short v = ZclDataTypeUI8.zclParse(zclFrame);
		setCachedAttributeObject(48, new Short(v));
		return v;
	}

	public short getUserCodeTemporaryDisableTime(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		if (context != null) {
			Short objectResult = null;
			objectResult = ((Short) getValidCachedAttributeObject(49, context.getMaxAgeForAttributeValues()));
			if (objectResult != null) {
				return objectResult.shortValue();
			}
		}
		IZclFrame zclFrame = readAttribute(49, context);
		short v = ZclDataTypeUI8.zclParse(zclFrame);
		setCachedAttributeObject(49, new Short(v));
		return v;
	}

	public boolean getSendPINovertheAir(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		if (context != null) {
			Boolean objectResult = null;
			objectResult = ((Boolean) getValidCachedAttributeObject(50, context.getMaxAgeForAttributeValues()));
			if (objectResult != null) {
				return objectResult.booleanValue();
			}
		}
		IZclFrame zclFrame = readAttribute(50, context);
		boolean v = ZclDataTypeBoolean.zclParse(zclFrame);
		setCachedAttributeObject(50, new Boolean(v));
		return v;
	}

	public boolean getRequirePINforRFOperation(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		if (context != null) {
			Boolean objectResult = null;
			objectResult = ((Boolean) getValidCachedAttributeObject(51, context.getMaxAgeForAttributeValues()));
			if (objectResult != null) {
				return objectResult.booleanValue();
			}
		}
		IZclFrame zclFrame = readAttribute(51, context);
		boolean v = ZclDataTypeBoolean.zclParse(zclFrame);
		setCachedAttributeObject(51, new Boolean(v));
		return v;
	}

	public short getZigBeeSecurityLevel(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		if (context != null) {
			Short objectResult = null;
			objectResult = ((Short) getValidCachedAttributeObject(52, context.getMaxAgeForAttributeValues()));
			if (objectResult != null) {
				return objectResult.shortValue();
			}
		}
		IZclFrame zclFrame = readAttribute(52, context);
		short v = ZclDataTypeUI8.zclParse(zclFrame);
		setCachedAttributeObject(52, new Short(v));
		return v;
	}

	public int getAlarmMask(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		if (context != null) {
			Integer objectResult = null;
			objectResult = ((Integer) getValidCachedAttributeObject(64, context.getMaxAgeForAttributeValues()));
			if (objectResult != null) {
				return objectResult.intValue();
			}
		}
		IZclFrame zclFrame = readAttribute(64, context);
		int v = ZclDataTypeBitmap16.zclParse(zclFrame);
		setCachedAttributeObject(64, new Integer(v));
		return v;
	}

	public int getKeypadOperationEventMask(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		if (context != null) {
			Integer objectResult = null;
			objectResult = ((Integer) getValidCachedAttributeObject(65, context.getMaxAgeForAttributeValues()));
			if (objectResult != null) {
				return objectResult.intValue();
			}
		}
		IZclFrame zclFrame = readAttribute(65, context);
		int v = ZclDataTypeBitmap16.zclParse(zclFrame);
		setCachedAttributeObject(65, new Integer(v));
		return v;
	}

	public int getRFOperationEventMask(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		if (context != null) {
			Integer objectResult = null;
			objectResult = ((Integer) getValidCachedAttributeObject(66, context.getMaxAgeForAttributeValues()));
			if (objectResult != null) {
				return objectResult.intValue();
			}
		}
		IZclFrame zclFrame = readAttribute(66, context);
		int v = ZclDataTypeBitmap16.zclParse(zclFrame);
		setCachedAttributeObject(66, new Integer(v));
		return v;
	}

	public int getManualOperationEventMask(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		if (context != null) {
			Integer objectResult = null;
			objectResult = ((Integer) getValidCachedAttributeObject(67, context.getMaxAgeForAttributeValues()));
			if (objectResult != null) {
				return objectResult.intValue();
			}
		}
		IZclFrame zclFrame = readAttribute(67, context);
		int v = ZclDataTypeBitmap16.zclParse(zclFrame);
		setCachedAttributeObject(67, new Integer(v));
		return v;
	}

	public int getRFIDOperationEventMask(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		if (context != null) {
			Integer objectResult = null;
			objectResult = ((Integer) getValidCachedAttributeObject(68, context.getMaxAgeForAttributeValues()));
			if (objectResult != null) {
				return objectResult.intValue();
			}
		}
		IZclFrame zclFrame = readAttribute(68, context);
		int v = ZclDataTypeBitmap16.zclParse(zclFrame);
		setCachedAttributeObject(68, new Integer(v));
		return v;
	}

	public int getKeypadProgrammingEventMask(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		if (context != null) {
			Integer objectResult = null;
			objectResult = ((Integer) getValidCachedAttributeObject(69, context.getMaxAgeForAttributeValues()));
			if (objectResult != null) {
				return objectResult.intValue();
			}
		}
		IZclFrame zclFrame = readAttribute(69, context);
		int v = ZclDataTypeBitmap16.zclParse(zclFrame);
		setCachedAttributeObject(69, new Integer(v));
		return v;
	}

	public int getRFProgrammingEventMask(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		if (context != null) {
			Integer objectResult = null;
			objectResult = ((Integer) getValidCachedAttributeObject(70, context.getMaxAgeForAttributeValues()));
			if (objectResult != null) {
				return objectResult.intValue();
			}
		}
		IZclFrame zclFrame = readAttribute(70, context);
		int v = ZclDataTypeBitmap16.zclParse(zclFrame);
		setCachedAttributeObject(70, new Integer(v));
		return v;
	}

	public int getRFIDProgrammingEventMask(IEndPointRequestContext context) throws ApplianceException, ServiceClusterException {
		if (context != null) {
			Integer objectResult = null;
			objectResult = ((Integer) getValidCachedAttributeObject(71, context.getMaxAgeForAttributeValues()));
			if (objectResult != null) {
				return objectResult.intValue();
			}
		}
		IZclFrame zclFrame = readAttribute(71, context);
		int v = ZclDataTypeBitmap16.zclParse(zclFrame);
		setCachedAttributeObject(71, new Integer(v));
		return v;
	}

}
